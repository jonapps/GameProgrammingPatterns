*************
Kursnote: 1.0
*************

Aufgabe Jump&Run
Spiel: Towerdefence

Note: 1

Positiv:
Schicke UI
Screenmanager, viele Screens
Cooles, richtiges Spiel
3rd-Party Soundmanager integriert
Viel Polish!
Datengetriebene Waves und Präsentation etc
Sinnvoller Einsatz von Pattern
Meine Erwartungen für diesen Kurs habt ihr klar übertroffen.


Kritik & Tips:

Das Icon kann man so setzen:

		private void setIcon(String file)
        {
            System.Drawing.Icon icon = new System.Drawing.Icon(file);
            Rectangle r = new Rectangle(new Point(), icon.Size);
            Bitmap bmp = icon.ToBitmap();
            // Lock the bitmap's bits into sys memory
            BitmapData bmpData = bmp.LockBits(r, ImageLockMode.ReadWrite, bmp.PixelFormat);
            // Declare an array to hold the bytes of the bitmap. 
            int numBytes  = Math.Abs(bmpData.Stride) * bmp.Height;
            byte[] rgbValues = new byte[numBytes];
            // Copy the RGB values into the array.
            System.Runtime.InteropServices.Marshal.Copy(bmpData.Scan0, rgbValues, 0, numBytes);
            // now use that as an icon
            _window.SetIcon((uint)icon.Width, (uint)icon.Height, rgbValues);
            bmp.UnlockBits(bmpData);
            icon.Dispose();
        }


Ist in euerm Fall noch nicht wirklich zwingend aber Logik & Visualisierung könnte man noch strenger trennen. Die Tower-Klasse muss sich momentan nicht nur um ihr eigenes Rendering kümmern in dem entsprechende Sprites erzeugt und gezeichnet werden, sondern der Code legt auch fest, dass die animierten Sprites genau 32 Frames haben, wie die Textur geladen wird (AssetLoader) und wie die Textur heißt. Das ist viel oberflächliches für eine Klasse, die auch zentrale logische Bedeutung hat. Wie wärs mit einer SpriteRotation Klasse, die z.b das Richtung->Frame mapping kapselt? Und generell, wie gesagt sind Visualisierung und Logik etwas, dass man am besten trennt. Gilt auch für Enemy.cs.
Manche Spiele gehen so weit, dass auch Singleplayer aus getrennten Client und Server Prozessen besteht wobei ersterer die Grafik & Steuerung und letzterer die Spiellogik verwaltet.

SpriteEntity sollte mit jeder Form von TextureContainer gleichermaßen klarkommen. Das ist im Prinzip das Versprechen dass der Constructor gibt. Und es ist in der Verantwortung desjenigen, der von TextureContainer erbt dafür zu sorgen, dass das https://de.wikipedia.org/wiki/Liskovsches_Substitutionsprinzip eingehalten wird.

Es gibt noch mehr Details die man man besser oder anders machen könnte. Meistens fallen sie unter das Sitchwort Speration of Concerncs, d.h. mehr dafür kürzere Klassen. Weniger Zahlen im Code. Das entscheidende ist aber dass eure Architektur so gut ist, dass sie die Umsetzung dieser Vorschläge relativ leicht machen würde. Genau das erwartet man von einer guten Systemarchitektur, keine Perfektion aber Evolvierbarkeit. Es soll die sehr gute Note deshalb nicht schmälern. Glatte 1 auch für den Kurs.




Aufgabe Pong

Note: 1

Positiv:

Compiliert & Startet sofort
Schicke Präsentation
ScreenManager funktioniert
GameLoop ordentlich umgesetzt.
Controllersteuerung

Kritik & Tips:

Hab wirklich wenig zu meckern! Insgesamt sehr gute Ideen und sehr gute Umsetzung.

Die Collisionsbehandlung ist teilweise noch etas buggy.

Auch Effekte (_effects) hätten als Entity modeliert werden könnnen. Man würde sich die zweite Schleife in der Rendermethode sparen und müsste die Position nicht im Rendering updaten sondern schön davon getrennt im Update().


Euer Sound-Manager kann jeden Sound nur einmal zur Zeit spielen. In der Praxis können sich SFX durchaus überlagern. Deshalb die (übliche) Trennung in SoundBuffer (einmal pro Sound-Source) und Sound (Instanziiert einen SoundBuffer mehrfach)

Aufgabe Shoot’m Up

Note: 1

Positiv:

Vorbildliche, elegante Architektur. Engine und Game sind schön getrennt.
Code ließt sich größtenteils sehr gut.
Cutscenes und generell sehr schicke Präsentation besonders das UI und der Paralax-Hintergrund.
Rundes Gesamtpaket.

Kritik & Tips:

Das Flugmodell ist sehr unphysikalisch, die Umsetzung mit einem Haufen Delegaten eher verwirrend. Wenn man eine Physikengien verwendet ist man eigentlich verpflichtet mit Kräften oder zumindest Impulsen zu arbeiten, finde ich. ;)

Beim Spielen ging irgendwann der Sound aus.

Waves wären entweder datengetrieben oder komplett prozedural schöner. Wave.Generate() gibt eine Liste von Entities zurück, führt intern eine zweite Liste und außerdem wird jede Entity noch den N bei der Factory hinterlegten Holdern hinzugefügt. Verwirrend viele Listen von Entities!

Exceptions, die nie gefangen werden und im Constructor eine Logausgabe machen? Ungewöhnlich! (Ungefangene Exception generieren eh schon unübersehbare Logausgaben) Wie wär’s mit einem Assert?

Wie benutzt man den Editor? Für einen Editor hätte sich auch ein zweites Projekt in der Projektmappe geeignet.

Sounds werden der _plaingSounds Liste hinzugefügt (damit der GC sie nicht frisst?) aber nie entfernt.

